# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Build and Deploy to AWS ECS
on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
jobs:
  build:
    name: "Maven Build"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 19
        uses: actions/setup-java@v3
        with:
          java-version: '19.0.2+7'
          distribution: 'temurin'
          cache: maven
      - name: Build with Maven
        run: mvn -B package -DskipTests --file pom.xml
      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: artifact
          path: target/doce-api.jar
          retention-days: 1
  docker-build:
    name: "Docker Build"
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - uses: actions/checkout@v3
      - name: Download Artifact
        uses: actions/download-artifact@v3
        with:
          name: artifact
          path: artifact
      - name: Test Artifact
        run: ls -R
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build the Docker image
        id: build-image
        run: |
          docker build . --file Dockerfile --tag $IMAGE
          docker push $IMAGE
        env:
          IMAGE: ${{vars.ECR_REGISTRY}}/${{vars.ECR_REPO}}:${{github.run_number}}
      - name: Delete artifact
        uses: geekyeggo/delete-artifact@v2
        with:
          name: artifact
  aws-deploy:
    name: "Deploy to AWS ECS"
    runs-on: ubuntu-latest
    needs: [docker-build]
    steps:
      - uses: actions/checkout@v3
      - name: Render Amazon ECS task definition
        id: render-web-container
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ./.aws/task-definition.json
          container-name: api
          image: ${{vars.ECR_REGISTRY}}/${{vars.ECR_REPO}}:${{github.run_number}}
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Deploy to Amazon ECS service
        if: ${{ false }}
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-web-container.outputs.task-definition }}
          service: doce-api-service
          cluster: doce
